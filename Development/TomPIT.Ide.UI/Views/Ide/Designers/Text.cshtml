@using System.Text.Encodings.Web;

@model TomPIT.Designers.TextDesigner

@await Html.PartialAsync("~/Views/Ide/Designers/Signature.cshtml", Model.Signature)

<div class="template-toolbar btn-toolbar justify-content-between">

	<div class="btn-group">
		@if (Model.CompletionDiagnostic != null)
		{
			<button class="btn btn-sm btn-light" id="checkSyntax" title="Check syntax"><i class="fal fa-check-circle"></i></button>
		}

		@if (!string.IsNullOrWhiteSpace(Model.DebugFileName))
		{
			var url = Model.Environment.Context.MapPath(string.Format("~/sys/source-code/{0}/{1}/{2}", Model.Element.MicroService(), Model.Content.Configuration().Component, Model.Content.Id.ToString()));

			<a href="@url" target="_blank" class="btn btn-sm btn-light" title="Download source code for debugging"><i class="fal fa-bug"></i></a>
		}
	</div>
</div>

<div id="designEditor" class="text-editor text-editor-sa" data-fullscreen="true"></div>

@if (Model.CompletionProvider != null)
{
	<div class="modal fade" tabindex="-1" role="dialog" id="modalStronglyTyped">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Create Strongly Typed Entity</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
				<div class="modal-body">
					<div id="listDataSources"></div>
					<hr />
					<div class="form-group">
						<div id="checkDirectBinding"></div>
					</div>
					<div class="form-group">
						<div id="checkReadOnly"></div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" id="btnCreateStronglyTyped">Create</button>
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>
}
<script>
        @{
            var lines = string.IsNullOrWhiteSpace(Model.Text) ? new string[0] : Model.Text.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None);
    }

    var src = [@foreach (var i in lines){
        @:'@Html.Raw(JavaScriptEncoder.Default.Encode(i))',
    }
        ];

    textEditor.activateEditor({
        id: 'design',
        elementId: 'designEditor',
        source: src,
        language: '@Model.Language',
        onChange: function (value) {
            saveSourceCode();
        },
        @if (Model.CompletionProvider != null)
            {
           <text>
        onCreated: function (instance) {
			  textEditor.registerCompletionItemProvider('@Model.Language', {
					provideCompletionItems: function (model, position, context) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'provideItems',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                triggerCharacter: context.triggerCharacter,
                                triggerKind:context.triggerKind,
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve({
                                    suggestions:data
                                })
                            }

                        });
                    });

                },
            });

            textEditor.registerSignatureHelpProvider('@Model.Language', {
                signatureHelpTriggerCharacters: ['(', '[', ',', '&lt'],
                provideSignatureHelp: function (model, position) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'signatureHelp',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve(data);
                            }
                        });

                    });
                },
            });

            textEditor.registerHoverProvider('@Model.Language', {
                provideHover: function (model, position) {
                    return new monaco.Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'hover',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve(data);
                            }
                        });

                    });
                },
            });

            var internalCommand = textEditor.addCommand(0, function (s, e) {
					ide.newWindow(e.microService, e.component, e.element);
            });

			  textEditor.addAction({
					id: 'strogly_type',
					label: 'Create Strongly Typed Entity',

					keybindings: [
						monaco.KeyMod.chord(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_S, monaco.KeyMod.CtrlCmd | monaco.KeyCode.KEY_T)
					],

					precondition: null,
					keybindingContext: null,
					contextMenuGroupId: 'navigation',
					contextMenuOrder: 1.5,

				  run: function (ed) {
					  $('#modalStronglyTyped').modal('show');

					  ide.designerAction({
						  data: {
							  'action':'dataSources'
						  },
						  onComplete: function (data) {
							  var list = $('#listDataSources').dxList('instance');

							  list.beginUpdate();
							  list.option('dataSource', data);
							  list.endUpdate();
						  }
					  });
						return null;
					}
			  });

            textEditor.registerCodeLensProvider('@Model.Language', {
                provideCodeLenses: function (model, token) {
                    saveSourceCode();
                    return new monaco.Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'codeLens',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                token: token,
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                if (typeof data !== 'undefined' && data !== null) {
                                    $.each(data, function (i, v) {
                                        v.command.id = internalCommand
                                    });
                                }
                                    resolve(data);
                            }
                        }, false);

                    });
                },
                resolveCodeLens: function (model, codeLens, token) {
                    return codeLens;
                }
            });

			  $('#listDataSources').dxList({
				  displayExpr: 'text',
				  valueExpr: 'value',
				  noDataText: 'no data sources found in this microservice',
				  height: '250px',
				  searchEnabled: true,
				  searchExpr: 'text',
				  selectionMode:'single',
				  searchEditorOptions: {
					  'placeholder':'search data sources'
				  }
			  });

			  $('#checkDirectBinding').dxCheckBox({
				  'value': true,
				  'text': 'use direct binding'
			  });

			  $('#checkReadOnly').dxCheckBox({
				  'value': false,
				  'text': 'read only'
			  });

			  $('#btnCreateStronglyTyped').click(function () {
				  var keys = $('#listDataSources').dxList('instance').option('selectedItems');

				  if (keys === null || keys.length === 0) {
					  tompit.warning('Data source must be selected.');

					  return;
				  }

				  var value = keys[0].value;

				  ide.designerAction({
					  data: {
						  'action': 'createStronglyType',
						  'dataSource': value,
						  'readOnly': $('#checkReadOnly').dxCheckBox('instance').option('value'),
						  'directBinding': $('#checkDirectBinding').dxCheckBox('instance').option('value'),
						  'currentText': textEditor.getValue()
					  },
					  onComplete: function (data) {
						  $('#modalStronglyTyped').modal('hide');

						  textEditor.insertText(data.text);
					  }
				  })
			  });
		  }

        </text>
            }
    });




    @if (Model.CompletionDiagnostic != null)
    {
       <text>

	$('#checkSyntax').click(function (e) {
        ide.saveProperty({
            data: {
                property: '@Model.PropertyName',
                attribute: '@Model.AttributeName',
                value: textEditor.getValue(),
                path: propertyPath
            },
            onComplete: function () {
                ide.designerAction({
                    data: {
                        action: 'checkSyntax',
							  section: 'designer',
								property: '@Model.PropertyName',
                    },
                    onComplete: function (data) {

                        if (data.length === 0) {
                            tompit.success('No errors found in the source code', "Valid");
                        }

                        textEditor.setMarkers(data);
                    }
                });
            }
        });
    });
        </text>
    }

    function saveSourceCode() {
                    ide.saveProperty({
                data: {
                    property: '@Model.PropertyName',
                    attribute: '@Model.AttributeName',
                    section: 'designer',
                    value: textEditor.getValue(),
                    path: propertyPath
                }
            });
	}

</script>