@using System.Text.Encodings.Web;
@using TomPIT.Ide;
@using TomPIT.ComponentModel;

@model TomPIT.Ide.Designers.TextDesigner

@await Html.PartialAsync("~/Views/Ide/Designers/Signature.cshtml", Model.Signature)

<div class="template-toolbar btn-toolbar justify-content-between">

	<div class="btn-group">
		@if (!string.IsNullOrWhiteSpace(Model.DebugFileName))
		{
			var url = Model.Environment.Context.Services.Routing.MapPath(string.Format("~/sys/source-code/{0}/{1}/{2}", Model.Element.MicroService(), Model.Content.Configuration().Component, Model.Content.Id.ToString()));

			<a href="@url" target="_blank" class="btn btn-sm btn-light" title="Download source code for debugging"><i class="fal fa-bug"></i></a>
		}
	</div>
</div>

<div id="designEditor" class="text-editor text-editor-sa" data-fullscreen="true"></div>

@if (Model.CodeAnalyzer != null)
{
	<div class="modal fade" tabindex="-1" role="dialog" id="modalStronglyTyped">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Create Data Entity</h5>
					<button type="button" class="close" data-dismiss="modal" aria-label="Close">
						<span aria-hidden="true">&times;</span>
					</button>
				</div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Connections</label>
                        <div id="editConnections"></div>
                    </div>
                    <div id="listDataSources"></div>
                    <hr />
                    <div class="form-group">
                        <label>Class name</label>
                        <div id="textTypeName"></div>
                    </div>
                    <div class="form-group">
                        <div id="checkReadOnly"></div>
                    </div>
                </div>
				<div class="modal-footer">
					<button type="button" class="btn btn-primary" id="btnCreateStronglyTyped">Create</button>
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
				</div>
			</div>
		</div>
	</div>
}
<script>
        @{
            var lines = string.IsNullOrWhiteSpace(Model.Text) ? new string[0] : Model.Text.Split(new string[] { "\r\n", "\n" }, StringSplitOptions.None);
    }

    var src = [@foreach (var i in lines){
        @:'@Html.Raw(JavaScriptEncoder.Default.Encode(i))',
    }
        ];

    textEditor.activateEditor({
        id: 'design',
        elementId: 'designEditor',
        source: src,
        language: '@Model.Language',
        onChange: function (value) {
            saveSourceCode();
        },
        @if (Model.CodeDiagnostic != null)
        {
           <text>
        onCheckSyntax: function () {
            checkSyntax();
        },
            </text>
        }
        @if (Model.CodeAnalyzer != null)
            {
           <text>
        onCreated: function (instance) {

            @if (Model.CodeDiagnostic != null)
            {
               @:setErrorMarkers(false);
        }

			  textEditor.registerCompletionItemProvider('@Model.Language', {
					provideCompletionItems: function (model, position, context) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'provideItems',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                triggerCharacter: context.triggerCharacter,
                                triggerKind:context.triggerKind,
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve({
                                    suggestions:data
                                })
                            }

                        }, false);
                    });
                },
              });

            textEditor.registerCodeActionProvider('@Model.Language', {
                provideCodeActions: function (model, range, context) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'provideCodeActions',
                                section: 'designer',
                                property: '@Model.PropertyName',
                                model: {
                                    'id': model.id,
                                    'uri': model.uri.toString()
                                },
                                range:range,
                                context: context,
                                text: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve({
                                    actions:data
                                })
                            }

                        }, false);
                    });
                }
            });

            textEditor.registerSignatureHelpProvider('@Model.Language', {
                signatureHelpTriggerCharacters: ['(', '[', ',', '&lt'],
                provideSignatureHelp: function (model, position) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'signatureHelp',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve({
                                    value: data,
                                    dispose: function () {}
                                });
                            }
                        }, false);

                    });
                },
			  });

			  @*textEditor.registerDefinitionProvider('@Model.Language', {
				  provideDefinition: function (model, position) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'definition',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                content: model.getValue()
                            },
									onComplete: function (data) {
										resolve({
											uri: monaco.Uri.parse(data.url),
											range: new monaco.Range(data.range.startLineNumber, data.range.startColumn, data.range.endLineNumber, data.range.endColumn)
										});
                            }
                        }, false);

                    });
				  }
			  });*@

            @*textEditor.registerHoverProvider('@Model.Language', {
                provideHover: function (model, position) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'hover',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                position: model.getOffsetAt({
                                    lineNumber: position.lineNumber,
                                    column: position.column
                                }),
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                resolve(data);
                            }
                        }, false);

                    });
                },
            });*@

     //       var internalCommand = textEditor.addCommand(0, function (s, e) {
					//ide.newWindow(e.microService, e.component, e.element);
     //       });

            @*textEditor.registerCodeLensProvider('@Model.Language', {
                provideCodeLenses: function (model, token) {
                    return new Promise(function (resolve, reject) {
                        ide.designerAction({
                            data: {
                                action: 'codeLens',
										 section: 'designer',
										  property: '@Model.PropertyName',
                                token: token,
                                content: model.getValue()
                            },
                            onComplete: function (data) {
                                if (typeof data !== 'undefined' && data !== null) {
                                    $.each(data, function (i, v) {
                                        //v.command.id = internalCommand
                                    });
                                }
                                    resolve(data);
                            }
                        }, false);

                    });
                },
                resolveCodeLens: function (model, codeLens, token) {
                    return codeLens;
                }
            });*@

            $('#editConnections').dxSelectBox({

            });

			  $('#listDataSources').dxList({
				  displayExpr: 'text',
				  valueExpr: 'value',
				  noDataText: 'no data sources found in this microservice',
				  height: '250px',
				  searchEnabled: true,
				  searchExpr: 'text',
				  selectionMode:'single',
				  searchEditorOptions: {
					  'placeholder':'search data sources'
                  },
                  onSelectionChanged: function (e) {
                      var selectedItems = e.component.option('selectedItems');

                      if (selectedItems != null && selectedItems.length > 0)
                          $('#textTypeName').dxTextBox('instance').option('value', selectedItems[0].text);
                  }
			  });

			  $('#textTypeName').dxTextBox({
			  });

			  $('#checkReadOnly').dxCheckBox({
				  'value': false,
				  'text': 'read only'
			  });

			  $('#btnCreateStronglyTyped').click(function () {
				  var keys = $('#listDataSources').dxList('instance').option('selectedItems');

				  if (keys === null || keys.length === 0) {
					  tompit.warning('Data source must be selected.');

					  return;
				  }

				  var value = keys[0].value;

                  ide.designerAction({
                      data: {
                          'action': 'createStronglyType',
                          'dataSource': value,
                          'readOnly': $('#checkReadOnly').dxCheckBox('instance').option('value'),
                          'name': $('#textTypeName').dxTextBox('instance').option('value'),
                          'currentText': textEditor.getValue()
                      },
                      onComplete: function (data) {
                          $('#modalStronglyTyped').modal('hide');

                          textEditor.insertText(data.text);
                      }
                  }, false);
			  });
		  }

        </text>
            }
    });




    @if (Model.CodeDiagnostic != null)
    {
       <text>

    function checkSyntax() {
                ide.saveProperty({
            data: {
                property: '@Model.PropertyName',
                attribute: '@Model.AttributeName',
                value: textEditor.getValue(),
                path: propertyPath
            },
                    onComplete: function () {
                        setErrorMarkers();
            }
        }, false);
    }

    function setErrorMarkers() {
        ide.designerAction({
            data: {
                action: 'checkSyntax',
                section: 'designer',
                property: '@Model.PropertyName',
                model: {
                    'id': textEditor.getEditor().getModel().id,
                    'uri': textEditor.getEditor().getModel().uri.toString()
                },
                text:textEditor.getEditor().getValue()
            },
            onComplete: function (data) {
                textEditor.setMarkers(data);
            }
        }, false);
    }
        </text>
    }

    function saveSourceCode() {
                    ide.saveProperty({
                data: {
                    property: '@Model.PropertyName',
                    attribute: '@Model.AttributeName',
                    section: 'designer',
                    value: textEditor.getValue(),
                    path: propertyPath
                }
            });
	}

    ide.setActiveDesigner({
        onUnload: function () {
            textEditor.deactivateEditor();
        },
        onSaveState: function () {
            return {
                'position': textEditor.getEditor().getPosition()
            }
        },
        onLoadState: function (state) {
            if (typeof state.position !== 'undefined') {
                textEditor.getEditor().setPosition(state.position);
                textEditor.getEditor().revealLineInCenter(state.position.lineNumber);
            }

            textEditor.getEditor().focus();
        }
    });
</script>