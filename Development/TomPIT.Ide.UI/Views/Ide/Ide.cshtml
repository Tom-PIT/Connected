@using TomPIT.Design.Ide;
@using TomPIT.Design;
@using TomPIT.Ide;

@model TomPIT.Design.Ide.IEnvironment

@{
    Layout = "~/Views/Shared/Shell.cshtml";

    var qspath = Context.Request.Query["path"].ToString();
    var element = string.Empty;
    var eventName = string.Empty;

    if (string.IsNullOrWhiteSpace(qspath))
    {
        var component = Context.Request.Query["component"].ToString();

        if (!string.IsNullOrWhiteSpace(component))
        {
            element = Context.Request.Query["element"].ToString();
            var elementId = string.IsNullOrWhiteSpace(element) ? Guid.Empty : new Guid(element);

            qspath = Model.ResolvePath(new Guid(component), elementId, out eventName);
        }
    }


    var path = "Assets/Libraries/Monaco/vs";

    var ctx = Model as TomPIT.Middleware.IMiddlewareContext;
    if (ctx != null)
    {
        path = ctx.Services.Routing.MapPath("~/Assets/Libraries/Monaco/vs");
    }
}

@section head {
    @{
        var templates = Model.Context.Tenant.GetService<IMicroServiceTemplateService>().Query();

        foreach (var template in templates)
        {
            var resources = template.ProvideIdeResources();

            if (resources == null)
            {
                continue;
            }

            foreach (var resource in resources)
            {
                if (resource.Type == IdeResourceType.Script)
                {
                    <script src="@Model.Context.Services.Routing.Absolute(resource.Path)"></script>
                }
                else if (resource.Type == IdeResourceType.Stylesheet)
                {
                    <link rel="stylesheet" type="text/css" href="@Model.Context.Services.Routing.Absolute(resource.Path)" />
                }
            }
        }
    }

<environment names="Staging,Production">
    <link rel="stylesheet" type="text/css" href="~/Assets/ide.min.css" />
    <script src="~/Assets/ide.min.js"></script>
    <script src="~/Assets/environment.min.js"></script>
</environment>

<environment names="Development">
    <link rel="stylesheet" type="text/css" href="~/Assets/Styles/ide.css" />
    <script src="~/Assets/Scripts/ide.js"></script>
    <script src="~/Assets/Scripts/textEditor.js"></script>
    <script src="~/Assets/Scripts/environment.js"></script>
</environment>
}

<script src="~/Assets/Libraries/Monaco/vs/loader.js"></script>


<div id="ide" class="h-100">
    @await Html.PartialAsync("~/Views/Ide/Console.cshtml", Model)
</div>


@section Scripts {
    <script>
        DevExpress.ui.setTemplateEngine("underscore");
    </script>
}

<script>
    tompit.disableNavigation();

    tompit.DEVDEFAULTS = {
        environmentUrl: '@Model.IdeUrl',
        rootUrl: '@Model.Context.Services.Routing.RootUrl'
    };

    tompit.DEVGLOBALIZE = {
        appUrlNotSet: '@SR.ErrJsEnvironmentUrlNotSet'
    };

    var ide = $('#ide').tpIde().data('tompit-tpIde'),
        textEditor = null,
        textEditorState = null;

    require.config({ paths: { 'vs': '@path' } });


    $('#devTextDesigner').tpTextEditor({
        path: '@path',
        onCreated: function (sender, instance) {
            textEditorState = sender;
            textEditor = instance;
            textEditorWidget = sender;
            textEditor.layout();
            textEditorState.registerForObservation(document.querySelector('#devDesignerSizeBox'));
            initTextEditor();
        }
    });


    $('#devExplorer').keyup(function (e) {
        if (e.which === 39) {
            ide.expandCurrent();
        }
        else if (e.which === 37) {
            ide.collapseCurrent();
        }
        else if (e.which === 40) {
            ide.selectNext();
            e.preventDefault();
            e.stopPropagation();
        }
        else if (e.which === 38) {
            ide.selectPrevious();
        }
	});

	@if (!string.IsNullOrWhiteSpace(qspath))
	{
        <text>
		ide.expandTo({
            'path': '@qspath',
            @if (!string.IsNullOrWhiteSpace(eventName)) {
               <text>
            onComplete: function () {
                    ide.loadSection({
                        section: 'designer',
                        data: {
                            property: '@eventName'
                        }
                    });
            }
                </text>
                }
            });
        </text>
	}


    function refreshErrorList() {
        ide.refreshSections({
            sections: 'errorList',
            path: ide.selectedPath(),
            data: {
                'error': ide.options.designer.errorListState.error,
                'warning': ide.options.designer.errorListState.warning,
                'info': ide.options.designer.errorListState.info,
                'loadMore': ide.options.designer.errorListState.loadMore
            },
            onComplete: function () {
                setTimeout(refreshErrorList, 10000);
            }
        });
    }

    refreshErrorList();

    function initTextEditor(callback){
        if (window._textEditorInitialized) {
            if (callback)
                callback();

            return;
        }

        if (textEditor)
            window._textEditorInitialized = true;

        if (callback && textEditor) {
            callback();
            return;
        }

        if (callback)
            window._textEditorCallback = callback;

        if (!textEditor)
            return;

        if (!callback && window._textEditorCallback) {
            window._textEditorCallback();
            window._textEditorCallback = 'undefined';
        }
        else if(callback)
            callback();
    }

    if (env)
        env.initialize();
</script>