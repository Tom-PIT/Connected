@model TomPIT.Ide.IEnvironment
@{
   Layout = "~/Views/Shared/Shell.cshtml";

   var qspath = Context.Request.Query["path"].ToString();
   var element = string.Empty;
   var eventName = string.Empty;

   if (string.IsNullOrWhiteSpace(qspath))
   {
       var component = Context.Request.Query["component"].ToString();

       if (!string.IsNullOrWhiteSpace(component))
       {
           element = Context.Request.Query["element"].ToString();
           var elementId = string.IsNullOrWhiteSpace(element) ? Guid.Empty : element.AsGuid();

           qspath = Model.ResolvePath(component.AsGuid(), elementId, out eventName);
       }
   }
}

@section head{
	<environment names="Staging,Production">
		<link rel="stylesheet" type="text/css" href="~/Assets/ide.min.css" />
		<script src="~/Assets/ide.min.js"></script>
	</environment>
	<environment names="Development">
		<link rel="stylesheet" type="text/css" href="~/Assets/Styles/ide.css" />
		<script src="~/Assets/Scripts/ide.js"></script>
		<script src="~/Assets/Scripts/textEditor.js"></script>
	</environment>

}

@{
	var path = "Assets/Libraries/monaco/vs";
	var ctx = Model as TomPIT.Services.IExecutionContext;

	if (ctx != null)
	{ path = ctx.MapPath("~/Assets/Libraries/monaco/vs"); }
}

<script src="~/Assets/Libraries/monaco/vs/loader.js"></script>

<div id="ide" class="h-100">
	@await Html.PartialAsync("~/Views/Ide/Console.cshtml", Model)
</div>

@section Scripts{
	<script>
		DevExpress.ui.setTemplateEngine("underscore");
	</script>
}

<script>
    tompit.disableNavigation();

        tompit.DEVDEFAULTS = {
        environmentUrl: '@Model.IdeUrl',
    }

    tompit.DEVGLOBALIZE = {
        appUrlNotSet: '@SR.ErrJsEnvironmentUrlNotSet'
     }

    var ide = $('#ide').tpIde().data('tompit-tpIde');

		$('#ide').tpTextEditor({
		    path: '@path'
		});

        var textEditor = $('#ide').data('tompit-tpTextEditor');
        require.config({ paths: { 'vs': '@path' } });

    $('#devExplorer').keyup(function (e) {
        if (e.which === 39) {
            ide.expandCurrent();
        }
        else if (e.which === 37) {
            ide.collapseCurrent();
        }
        else if (e.which === 40) {
            ide.selectNext();
            e.preventDefault();
            e.stopPropagation();
        }
        else if (e.which === 38) {
            ide.selectPrevious();
        }
	});

	@if (!string.IsNullOrWhiteSpace(qspath))
	{
       <text>
		ide.expandTo({
            'path': '@qspath',
            @if (!string.IsNullOrWhiteSpace(eventName)) {
               <text>
            onComplete: function () {
                    ide.loadSection({
                        section: 'designer',
                        data: {
                            property: '@eventName'
                        }
                    });
            }
                </text>
                }
            });
    </text>
	}
    
   setInterval(function () {
        ide.refreshSections({
            sections: 'errorList',
            path: ide.selectedPath(),
            data: {
                'error': ide.options.designer.errorListState.error,
                'warning': ide.options.designer.errorListState.warning,
                'info': ide.options.designer.errorListState.info
            }
        });
    }, 5000);

</script>