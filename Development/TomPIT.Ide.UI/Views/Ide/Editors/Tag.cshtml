@using TomPIT;
@using TomPIT.Reflection;
@using TomPIT.Design.Ide; 

@model TomPIT.Design.Ide.Properties.IProperty

@{
	var value = Types.Convert<string>(Model.Value);

	var required = Model.Validation.Required.IsRequired ? "required" : string.Empty;
	var items = TomPIT.Ide.DomQuery.Items(Model);
	var att = Model.PropertyInfo.FindAttribute<TomPIT.Annotations.Design.TagEditorAttribute>();
	var selectionControls = att == null ? false : att.SelectionControls;
	var allowCustom = att == null ? false : att.AllowCustomValues;
	var values = new List<string>();

	if (items == null)
	{ items = new List<IItemDescriptor>(); }

	if (Model.PropertyInfo.PropertyType.IsEnum && Model.PropertyInfo.PropertyType.FindAttribute<FlagsAttribute>() != null)
	{
		selectionControls = true;
	}

	if (!string.IsNullOrWhiteSpace(value))
	{
		var tokens = value.Split(',');

		foreach (var i in tokens)
		{
			var v = i.Trim();

			values.Add(v);

			if (items.FirstOrDefault(f => string.Compare(f.Value.ToString(), v, true) == 0) == null)
			{
				items.Add(new TomPIT.Ide.Collections.ItemDescriptor(v, v));
			}

		}
	}

	var tagItems = items.Select(f => f.Text).ToList();
}


<div name="@Model.Name"></div>

<script>
    $('[name="@Model.Name"]').dxTagBox({
		 disabled: @Html.TP().JavaScript.Render(Model.IsReadOnly),
	stylingMode: 'underlined',
        width: '100%',
        @if (Model.Validation.MaxLength.MaxLength > 0)

				{

			  <text>
		  maxLength: @Model.Validation.MaxLength.MaxLength,

					 </text>

			  }
	value: @Html.TP().JavaScript.Array(values),
		 items:@Html.TP().JavaScript.Array(tagItems),
		 showSelectionControls: @Html.TP().JavaScript.Value(selectionControls),
		 @if(allowCustom) {
		 <text>
		 acceptCustomValue: true,
		 onCustomItemCreating: function (args) {
			 var newValue = args.text;
			 component = args.component,
			 currentItems = component.option("items");
			 currentItems.unshift(newValue);
			 component.option("items", currentItems);
			 args.customItem = newValue;
		 },
		 </text>
			 }
	 onValueChanged: function (e) {
		 ide.saveProperty({
			 data: {
				 path: propertyPath,
				 property: '@Model.Name',
				 value: e.value == null ? null : e.value.toString(),
			 },
			 onError: function (request, status, error) {
				 var data = JSON.parse(request.responseText);

				 $('[name="@Model.Name"]').dxTagBox('instance').option({
					 validationError: {
						 message: data.message
					 },
					 isValid: false
				 });

				 return true;
			 }
		 });

        }
	 }).dxValidator({
		 validationGroup: 'property',
		 validationRules: [
			  @if (Model.Validation.Required.IsRequired)


				{

					<text>

				{'type':'required'}

				</text>

				}
        ]
    });
</script>