@model TomPIT.Development.Models.HomeModel

@{
    var components = new TomPIT.Development.Models.Tools.ComponentListModel(Model, Model.Discovery);
}

<div class="btn-group btn-group-sm" role="group">
    <button type="button" id="btnPerformCheck" class="btn btn-sm btn-light" title="Perform type analysis"><i class="fal fa-clipboard-list-check"></i></button>
</div>
<hr />

<div class="row">
    <div class="col-md-4">
        <div class="kpi light">
            <div class="kpi-title">
                Components
            </div>
            <hr />
            <div class="kpi-value">
                @components.Components.Count.ToString("n0")
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="kpi danger">
            <div class="kpi-title">
                Errors
            </div>
            <hr />
            <div class="kpi-value" id="errorCount">
                @components.Errors.Count.ToString("n0")
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="kpi light">
            <div class="kpi-title">
                Last check
            </div>
            <hr />
            <div class="kpi-value small" id="toolLastCheck">
                <span class="align-middle">@components.ToolStatus</span>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col mt-2">
        <div id="dataGridComponents">

        </div>
    </div>
</div>
<script>
    var collapseStates = [];

    $('#btnPerformCheck').click(function () {
        tompit.post({
            'url': '@Model.Services.Routing.RootUrl/sys/run-tool/configurationtypeloader',
            onSuccess: function () {
                tompit.success('Configuration type analysis is running. This can take a few minutes...');
            }
        });
    });

    $('#dataGridComponents').dxDataGrid({
        dataSource:@Html.Raw(TomPIT.Serialization.Serializer.Serialize(components.DataSource)),
        searchPanel: {
           visible:true
        },
        columns: [
            {
                dataField: 'name',
                caption: 'Component',
                calculateCellValue: function (data) {
                    var r = [data.microService, data.category, data.name];

                    if (data.errorCount > 0)
                        r.push('invalid');

                    return r.join(' ');
                },
                cellTemplate: function (container, options) {
                    var ok = options.data.state === true;

                    var glyph = ok ? 'fal fa-check' : '';
                    var glyphClass = ok ? 'text-success' : 'text-danger';

                    var errorInfo = ok ? '' : $('<div>')
                        .append($('<span>', { 'class': 'pointer badge badge-pill badge-danger', 'data-error': 'true', 'data-id': options.data.component }).html(options.data.errorCount));

                    var media = $('<div>', { 'class': 'media' })
                        .append($('<div>', { 'class': 'mr-3 text-center ' + glyphClass })
                            .append($('<i/>', { 'class': 'fa-2x ' + glyph }))
                            .append(errorInfo));

                    media.append(
                        $('<div>', { 'class': 'media-body' })
                            .append($('<div>', { 'class': 'small' }).html(options.data.microService))
                            .append($('<div>').html(options.data.name))
                            .append($('<div>', { class: 'text-secondary small' }).html(options.data.category)));

                    var errorList = '';
                    var collapseState = '';

                    $.each(collapseStates, function (i, v) {
                        if (v.component === options.data.component)
                            collapseState = 'show';
                    });

                    if (options.data.errorCount > 0) {
                        errorList = $('<div>', { 'class': 'collapse ' + collapseState, 'data-target': options.data.component })
                            .append('<hr/>');

                        var items = $('<ul>', {'class': 'text-danger'});

                        $.each(options.data.errors, function (i, v) {
                            var autoFix = '';

                            if (typeof v.autoFix !== 'undefined' && v.autoFix !== null)
                                autoFix = $('<button>', { 'class': 'mt-3 btn btn-outline-secondary btn-sm', 'data-fix':v.autoFix, 'data-id': v.identifier }).html('<i class="fal fa-lightbulb-on text-warning mr-3"></i>try autofix this error');

                            items.append($('<li>').html('<div>' + v.message + ' (' + v.code + ')</div>')
                                .append(autoFix));
                        });

                        errorList.append(items);
                    }

                    $('<div>')
                        .append(media)
                        .append(errorList)
                        .appendTo(container);
                }
            }
        ],
        onContentReady: function (e) {
            $('[data-error="true"]').click(function () {
                var id = $(this).attr('data-id');

                var target = $('[data-target="' + id + '"]');

                if (target.hasClass('show')) {
                    $.each(collapseStates, function (i, v) {
                        if (v.component === id) {
                            collapseStates.splice(i, 1);
                            return false;
                        }
                    });
                }
                else {
                    collapseStates.push({ 'component': id });
                }

                target.collapse('toggle');
            });

            $('[data-fix]').click(function () {
                var id = $(this).attr('data-id');
                var fix = $(this).attr('data-fix');

                tompit.post({
                    'url': '@Model.Services.Routing.RootUrl/sys/auto-fix',
                    'data': {
                        'provider': fix,
                        'error': id
                    },
                    onSuccess: function () {
                        tompit.info('Auto fix has been scheduled. Please note it can take a while to complete a fix.');
                    }
                });
            });
        }
    });

    setTimeout(refreshData, 2500);

    function refreshData() {
        tompit.post({
            'url': '@Model.Services.Routing.RootUrl/sys/get-data/componentlist',
            onSuccess: function (data) {
                $('#dataGridComponents').dxDataGrid('instance').option('dataSource', data.dataSource);
                $('#toolLastCheck').html('<span class="align-middle">' + data.toolStatus + '</span>');
                $('#errorCount').html('<span class="align-middle">' + data.errorCount + '</span>');

                setTimeout(refreshData, 2500);
            }
        });
    }
</script>