using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using TomPIT.Annotations;
using TomPIT.Annotations.Design;
using TomPIT.ComponentModel;
using TomPIT.ComponentModel.Resources;
using TomPIT.Design;
using TomPIT.Storage;

namespace TomPIT.MicroServices.Resources;


[Syntax(SyntaxAttribute.Xml), FileNameExtension("resx")]
public class AssemblyResource : TextConfiguration, IAssemblyResourceConfiguration
{
	public override string FileName => $"{ToString()}.resx";

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public AccessModifier AccessModifier { get; set; } = AccessModifier.Public;

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public string Namespace { get; set; }

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public string Url { get; set; }

	public async Task ProcessChanged()
	{
		await UpdateFile();
	}

	public async Task ProcessCreated()
	{
		await UpdateFile();
	}

	public async Task ProcessDeleted()
	{
		var blobs = await QueryAdditionalFiles();

		if (blobs is null)
			return;

		var ms = Tenant.GetService<IMicroServiceService>().Select(this.MicroService());

		foreach (var blob in blobs)
			Tenant.GetService<IDesignService>().Components.Delete(ms.Token, blob.Key, blob.Value);

		await Task.CompletedTask;
	}

	public async Task ProcessRestored()
	{
		await UpdateFile();
	}

	public Task<List<KeyValuePair<Guid, int>>> QueryAdditionalFiles()
	{
		if (TextBlob == Guid.Empty)
			return Task.FromResult(new List<KeyValuePair<Guid, int>>());

		return Task.FromResult(new List<KeyValuePair<Guid, int>>
		{
			new KeyValuePair<Guid,int>(TextBlob, BlobTypes.AutoGenerated)
		});
	}
	private async Task UpdateFile()
	{
		if (TextBlob == Guid.Empty)
			return;

		var text = await ResXWriter.Write(this) ?? string.Empty;
		var ms = Tenant.GetService<IMicroServiceService>().Select(this.MicroService());

		Tenant.GetService<IDesignService>().Components.Update(ms.Token, Component, TextBlob, BlobTypes.AutoGenerated, "plain/text", $"{ToString()}.Designer.cs", Component.ToString(), Encoding.UTF8.GetBytes(text));
	}
}
