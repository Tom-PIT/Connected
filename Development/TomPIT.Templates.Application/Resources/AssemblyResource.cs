using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TomPIT.Annotations;
using TomPIT.Annotations.Design;
using TomPIT.ComponentModel;
using TomPIT.ComponentModel.Resources;
using TomPIT.Storage;

namespace TomPIT.MicroServices.Resources;


[Syntax(SyntaxAttribute.Xml), FileNameExtension("resx")]
public class AssemblyResource : TextConfiguration, IAssemblyResourceConfiguration
{
	public override string FileName => $"{ToString()}.resx";

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public AccessModifier AccessModifier { get; set; } = AccessModifier.Public;

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public string Namespace { get; set; }

	[PropertyCategory(PropertyCategoryAttribute.CategoryBehavior)]
	public string Url { get; set; }

	public async Task ProcessChanged()
	{
		await UpdateFile();
	}

	public async Task ProcessCreated()
	{
		await UpdateFile();
	}

	public async Task ProcessDeleted()
	{
		var blobs = await QueryAdditionalFiles();

		if (blobs is null)
			return;

		foreach (var blob in blobs)
			Tenant.GetService<IStorageService>().Delete(blob);

		await Task.CompletedTask;
	}

	public async Task ProcessRestored()
	{
		await UpdateFile();
	}

	public async Task<List<Guid>> QueryAdditionalFiles()
	{
		var ms = Tenant.GetService<IMicroServiceService>().Select(this.MicroService());
		var blobs = Tenant.GetService<IStorageService>().Query(ms.Token, BlobTypes.AutoGenerated, ms.ResourceGroup, Component.ToString());

		if (blobs is null)
			return new List<Guid>();

		await Task.CompletedTask;

		return blobs.Select(f => f.Token).ToList();
	}
	private async Task UpdateFile()
	{
		var text = await ResXWriter.Write(this);
		var ms = Tenant.GetService<IMicroServiceService>().Select(this.MicroService());

		Tenant.GetService<IStorageService>().Upload(new Blob
		{
			ContentType = "plain/text",
			FileName = $"{ToString()}.Designer.cs",
			MicroService = ms.Token,
			PrimaryKey = Component.ToString(),
			ResourceGroup = ms.ResourceGroup,
			Size = text.Length,
			Type = BlobTypes.AutoGenerated
		}, Encoding.UTF8.GetBytes(text), StoragePolicy.Singleton);
	}
}
