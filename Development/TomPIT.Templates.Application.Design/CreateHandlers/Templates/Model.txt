#load "Common/Common"

using System;
using System.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using TomPIT.Data;
using TomPIT.Annotations;
using TomPIT.Annotations.Models;
using TomPIT.ComponentModel.Data;
using TomPIT.Security;

public class [MODELTYPE] : ModelMiddleware<[ENTITYTYPE]>
{
   public int Insert(InsertArgs e)
   {
      var result = new ResultEntity<int>();
      
      Execute("Insert", new
      {         
      }, result);
      
      return result;
   }

   public void Update([ENTITYTYPE] entity, UpdateArgs e)
   {
      Execute("Update", entity, e);
   }

   public void Update([ENTITYTYPE] entity, params object[] properties)
   {
      Execute("Update", entity, properties);
   }

   public void Delete([ENTITYTYPE] entity)
   {
      Execute("Delete", new { Id = entity.Id });
   }

   public [ENTITYTYPE] Select(int id)
   {
      return Select("Select", new { Id = id });
   }

   public List<[ENTITYTYPE]> Query(QueryArgs e)
   {
      return Query("Query", e);
   }

   public List<[ENTITYTYPE]> Lookup(List<int> ids)
   {
      if(ids is null || !ids.Any())
         return new();

      return Query("Lookup", new 
      {
        ids = ids.ToJsonParameterList("id")
      });
   }

   public class InsertArgs
   {
       public RecordState State { get; set; } = RecordState.Valid;
   }
   
   public class UpdateArgs
   {   
       public RecordState State { get; set; } = RecordState.Valid;
   
       public string Version { get; set; }
   }
   
   public class QueryArgs
   {
       public RecordState State { get; set; } = RecordState.Valid;
   }
}

[Schema(Schema = "[SCHEMA]", Name = "[SCHEMANAME]", Type = SchemaAttribute.SchemaTypeTable)]
public class [ENTITYTYPE] : VersionedEntity<int>
{
   public const string EntityType = "[ENTITYKEY]";
   public const string CacheKey = "[CACHEKEY]";
   public const string ProxyKey = "[AUTHKEY]";

   [PrimaryKey]
   [ReturnValue]
   [CacheKey]
   [ProxyProperty(ProxyKey)]
   public override int Id { get; set; }

   public RecordState State { get; set; }
}