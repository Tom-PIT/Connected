[{"version":"1.0.130.2","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[log] ADD\r\n[metric] [bigint] NULL\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[log] DROP\r\nCOLUMN [authority_id],\r\nCOLUMN [authority],\r\nCOLUMN [context_authority_id],\r\nCOLUMN [context_authority],\r\nCOLUMN [context_property]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[log].[service]', N'component', N'COLUMN'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[log].[context_service]', N'element', N'COLUMN'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric]'\r\nGO\r\nCREATE TABLE [tompit].[metric]\r\n(\r\n[id] [bigint] NOT NULL IDENTITY(1, 1),\r\n[session] [uniqueidentifier] NOT NULL,\r\n[start] [datetime2] NOT NULL,\r\n[end] [datetime2] NULL,\r\n[result] [int] NULL,\r\n[instance] [int] NOT NULL,\r\n[request_ip] [varchar] (48) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[component] [uniqueidentifier] NOT NULL,\r\n[element] [uniqueidentifier] NULL,\r\n[parent] [uniqueidentifier] NULL,\r\n[request] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[response] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[consumption_in] [bigint] NULL,\r\n[consumption_out] [bigint] NULL\r\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_metric] on [tompit].[metric]'\r\nGO\r\nALTER TABLE [tompit].[metric] ADD CONSTRAINT [PK_metric] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_clr]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_clr]\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDELETE \r\n\tFROM tompit.metric\r\n\tWHERE (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_ins]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.metric (session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out)\r\n\tSELECT session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out \r\n\tFROM OPENJSON (@items) WITH (session uniqueidentifier, start datetime2(7), [end] datetime2(7), result int, instance int, request_ip varchar(48),\r\n\t\tcomponent uniqueidentifier, element uniqueidentifier, parent uniqueidentifier, request nvarchar, response nvarchar, consumption_in bigint, consumption_out bigint); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_que]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_que]\r\n\t@date date,\r\n\t@component uniqueidentifier,\r\n\t@element uniqueidentifier = NULL \r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.metric\r\n\tWHERE CAST([start] AS DATE) = @date\r\n\tAND (component = @component)\r\n\tAND (@element IS NULL OR element = @element); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.log (created, message, trace_level, source, category, event_id, metric, component, element)\r\n\tSELECT created, message, trace_level, source, category, event_id, metric, component, element FROM OPENJSON (@items) WITH (created datetime2(7), message nvarchar(max), trace_level int, source nvarchar(1024), category nvarchar(128),\r\n\t\tevent_id int, metric bigint, component uniqueidentifier, element uniqueidentifier); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_que]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_que]\r\n\t@date date,\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL,\r\n\t@metric bigint = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.log\r\n\tWHERE CAST(created AS DATE) = @date\r\n\tAND (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element)\r\n\tAND (metric IS NULL OR metric = @metric);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_agg_day]'\r\nGO\r\nCREATE TABLE [tompit].[metric_agg_day]\r\n(\r\n[id] [bigint] NOT NULL IDENTITY(1, 1),\r\n[component] [uniqueidentifier] NOT NULL,\r\n[element] [uniqueidentifier] NULL,\r\n[date] [date] NOT NULL,\r\n[count] [int] NOT NULL,\r\n[success] [int] NOT NULL,\r\n[duration] [bigint] NOT NULL,\r\n[max] [int] NOT NULL,\r\n[min] [int] NOT NULL,\r\n[consumption_in] [bigint] NOT NULL,\r\n[consumption_out] [bigint] NOT NULL,\r\n[max_consumption_in] [bigint] NOT NULL,\r\n[min_consumption_out] [bigint] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_metric_agg_day] on [tompit].[metric_agg_day]'\r\nGO\r\nALTER TABLE [tompit].[metric_agg_day] ADD CONSTRAINT [PK_metric_agg_day] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"},{"version":"1.0.131.2","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[metric_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[metric_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.metric (session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out)\r\n\tSELECT session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out \r\n\tFROM OPENJSON (@items) WITH (session uniqueidentifier, start datetime2(7), [end] datetime2(7), result int, instance int, request_ip varchar(48),\r\n\t\tcomponent uniqueidentifier, element uniqueidentifier, parent uniqueidentifier, request nvarchar(max), response nvarchar(max), consumption_in bigint, consumption_out bigint); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.log (created, message, trace_level, source, category, event_id, metric, component, element)\r\n\tSELECT created, message, trace_level, source, category, event_id, metric, component, element FROM OPENJSON (@items) WITH (created datetime2(7), message nvarchar(max), trace_level int, source nvarchar(1024), category nvarchar(128),\r\n\t\tevent_id int, metric uniqueidentifier, component uniqueidentifier, element uniqueidentifier); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_que]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_que]\r\n\t@date date,\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL,\r\n\t@metric uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.log\r\n\tWHERE CAST(created AS DATE) = @date\r\n\tAND (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element)\r\n\tAND (metric IS NULL OR metric = @metric);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"},{"version":"1.0.203.3","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping foreign keys from [tompit].[component]'\r\nGO\r\nALTER TABLE [tompit].[component] DROP CONSTRAINT [FK_component_feature]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping foreign keys from [tompit].[feature]'\r\nGO\r\nALTER TABLE [tompit].[feature] DROP CONSTRAINT [FK_feature_service]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping constraints from [tompit].[feature]'\r\nGO\r\nALTER TABLE [tompit].[feature] DROP CONSTRAINT [PK_feature]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature_sel]'\r\nGO\r\nDROP PROCEDURE [tompit].[feature_sel]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature_que]'\r\nGO\r\nDROP PROCEDURE [tompit].[feature_que]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature_ins]'\r\nGO\r\nDROP PROCEDURE [tompit].[feature_ins]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature_del]'\r\nGO\r\nDROP PROCEDURE [tompit].[feature_del]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[view_feature]'\r\nGO\r\nDROP VIEW [tompit].[view_feature]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature_upd]'\r\nGO\r\nDROP PROCEDURE [tompit].[feature_upd]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping [tompit].[feature]'\r\nGO\r\nDROP TABLE [tompit].[feature]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder]'\r\nGO\r\nCREATE TABLE [tompit].[folder]\r\n(\r\n[id] [int] NOT NULL IDENTITY(1, 1),\r\n[name] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r\n[parent] [int] NULL,\r\n[service] [int] NOT NULL,\r\n[token] [uniqueidentifier] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_folder] on [tompit].[folder]'\r\nGO\r\nALTER TABLE [tompit].[folder] ADD CONSTRAINT [PK_folder] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[component]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[component].[feature]', N'folder', N'COLUMN'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[view_component]'\r\nGO\r\n\r\nALTER VIEW [tompit].[view_component]\r\nAS\r\nSELECT      c.id, c.name, c.token, c.type, c.category, c.runtime_configuration, c.modified,\r\n\t\t\tc.service, c.folder, f.token as folder_token, s.token AS [service_token]\r\nFROM        tompit.component AS c \r\nLEFT JOIN\ttompit.folder f on c.folder=f.id\r\nINNER JOIN\ttompit.service s on c.service = s.id\r\n\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[component_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[component_ins]\r\n\t@folder int = NULL,\r\n\t@name nvarchar(128),\r\n\t@token uniqueidentifier,\r\n\t@type nvarchar(512),\r\n\t@category nvarchar(128),\r\n\t@runtime_configuration uniqueidentifier = NULL,\r\n\t@modified datetime,\r\n\t@service int\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tinsert tompit.component (folder, name, token, type, category, runtime_configuration, modified, service)\r\n\tvalues (@folder, @name, @token, @type, @category, @runtime_configuration, @modified, @service);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[component_upd]'\r\nGO\r\nALTER PROCEDURE [tompit].[component_upd]\r\n\t@id int,\r\n\t@name nvarchar(128),\r\n\t@modified datetime,\r\n\t@runtime_configuration uniqueidentifier = NULL,\r\n\t@folder int = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tupdate tompit.component set\r\n\t\tname = @name,\r\n\t\tmodified = @modified,\r\n\t\truntime_configuration = @runtime_configuration,\r\n\t\tfolder = @folder\r\n\twhere id = @id;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder_ins]'\r\nGO\r\nCREATE PROCEDURE [tompit].[folder_ins]\r\n\t@service int,\r\n\t@name nvarchar(128),\r\n\t@token uniqueidentifier,\r\n\t@parent int = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tinsert folder (service, name, token, parent)\r\n\tvalues (@service, @name, @token, @parent);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[view_folder]'\r\nGO\r\n\r\n\r\n\r\n\r\n\r\n\r\nCREATE VIEW [tompit].[view_folder]\r\nAS\r\nSELECT        f.id, f.service, f.name, f.parent, f.token, s.token AS [service_token], fp.token as parent_token\r\nFROM            tompit.folder AS f \r\nINNER JOIN tompit.[service] AS s ON f.[service] = s.id\r\nLEFT JOIN tompit.folder fp on f.parent = fp.id\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder_que]'\r\nGO\r\nCREATE PROCEDURE [tompit].[folder_que]\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tselect *\r\n\tfrom view_folder;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder_sel]'\r\nGO\r\nCREATE PROCEDURE [tompit].[folder_sel]\r\n\t@service int = NULL,\r\n\t@name nvarchar(128) = null,\r\n\t@token uniqueidentifier = null\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tselect top 1 *\r\n\tfrom view_folder\r\n\twhere (@service IS NULL OR service = @service)\r\n\tand (@name is null or name = @name)\r\n\tand (@token is null or token = @token);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder_upd]'\r\nGO\r\nCREATE PROCEDURE [tompit].[folder_upd]\r\n\t@id int,\r\n\t@name nvarchar(128),\r\n\t@parent int = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tupdate tompit.folder set\r\n\t\tname = @name,\r\n\t\tparent = @parent\r\n\twhere id = @id;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[folder_del]'\r\nGO\r\nCREATE PROCEDURE [tompit].[folder_del]\r\n\t@id int\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tdelete folder \r\n\twhere id = @id;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Adding foreign keys to [tompit].[component]'\r\nGO\r\nALTER TABLE [tompit].[component] ADD CONSTRAINT [FK_component_folder] FOREIGN KEY ([folder]) REFERENCES [tompit].[folder] ([id])\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Adding foreign keys to [tompit].[folder]'\r\nGO\r\nALTER TABLE [tompit].[folder] ADD CONSTRAINT [FK_folder_folder1] FOREIGN KEY ([parent]) REFERENCES [tompit].[folder] ([id])\r\nGO\r\nALTER TABLE [tompit].[folder] ADD CONSTRAINT [FK_folder_service] FOREIGN KEY ([service]) REFERENCES [tompit].[service] ([id])\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"},{"version":"1.0.211.1","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping foreign keys from [tompit].[message_subscriber]'\r\nGO\r\nALTER TABLE [tompit].[message_subscriber] DROP CONSTRAINT [FK_message_subscriber_message_topic]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping foreign keys from [tompit].[message_recipient]'\r\nGO\r\nALTER TABLE [tompit].[message_recipient] DROP CONSTRAINT [FK_message_recipient_message_subscriber]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Dropping constraints from [tompit].[message_subscriber]'\r\nGO\r\nALTER TABLE [tompit].[message_subscriber] DROP CONSTRAINT [PK_message_subscriber]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[log] ADD\r\n[date] [date] NULL\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_log_2] on [tompit].[log]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_log_2] ON [tompit].[log] ([component]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_log_1] on [tompit].[log]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_log_1] ON [tompit].[log] ([date]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_log] on [tompit].[log]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_log] ON [tompit].[log] ([metric]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Rebuilding [tompit].[message_subscriber]'\r\nGO\r\nCREATE TABLE [tompit].[RG_Recovery_1_message_subscriber]\r\n(\r\n[id] [bigint] NOT NULL IDENTITY(1, 1),\r\n[connection] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r\n[topic] [bigint] NOT NULL,\r\n[created] [datetime2] NOT NULL,\r\n[alive] [datetime2] NOT NULL,\r\n[instance] [uniqueidentifier] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nSET IDENTITY_INSERT [tompit].[RG_Recovery_1_message_subscriber] ON\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nINSERT INTO [tompit].[RG_Recovery_1_message_subscriber]([id], [connection], [topic], [created], [alive]) SELECT [id], [connection], [topic], [created], [alive] FROM [tompit].[message_subscriber]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nSET IDENTITY_INSERT [tompit].[RG_Recovery_1_message_subscriber] OFF\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @idVal BIGINT\r\nSELECT @idVal = IDENT_CURRENT(N'[tompit].[message_subscriber]')\r\nIF @idVal IS NOT NULL\r\n    DBCC CHECKIDENT(N'[tompit].[RG_Recovery_1_message_subscriber]', RESEED, @idVal)\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDROP TABLE [tompit].[message_subscriber]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[RG_Recovery_1_message_subscriber]', N'message_subscriber', N'OBJECT'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_message_subscriber] on [tompit].[message_subscriber]'\r\nGO\r\nALTER TABLE [tompit].[message_subscriber] ADD CONSTRAINT [PK_message_subscriber] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[message_subscriber_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[message_subscriber_ins]\r\n\t@topic bigint,\r\n\t@connection nvarchar(128),\r\n\t@created datetime2(7),\r\n\t@alive datetime2(7),\r\n\t@instance uniqueidentifier\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tinsert tompit.message_subscriber (connection, topic, created, alive, instance)\r\n\tvalues (@connection, @topic, @created, @alive, @instance);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[message]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[message] ALTER COLUMN [message] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[message_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[message_ins]\r\n\t@topic bigint,\r\n\t@message nvarchar(MAX) = null,\r\n\t@created datetime2(7),\r\n\t@expire datetime2(7),\r\n\t@retry_interval int,\r\n\t@token uniqueidentifier,\r\n\t@sender_instance uniqueidentifier\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tdeclare @id bigint;\r\n\r\n\tinsert tompit.message (topic, message, created, expire, retry_interval, token)\r\n\tvalues (@topic, @message, @created, @expire, @retry_interval, @token);\r\n\r\n\tset @id = scope_identity();\r\n\r\n\tinsert tompit.message_recipient (message, subscriber, retry_count, next_visible)\r\n\tselect @id,  id, 0, DATEADD(s, @retry_interval, @created) from tompit.message_subscriber where topic = @topic AND instance != @sender_instance;\r\n\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[view_message_recipient]'\r\nGO\r\n\r\n\r\n\r\n\r\n\r\n\r\nALTER VIEW [tompit].[view_message_recipient]\r\nAS\r\nSELECT      r.id, r.message, r.subscriber, r.retry_count, r.next_visible, m.token message_token, m.topic, s.connection, t.name topic_name, m.message content\r\nFROM        tompit.message_recipient AS r \r\nINNER JOIN\ttompit.[message] AS m ON r.[message] = m.id\r\nINNER JOIN\ttompit.message_subscriber s on r.subscriber = s.id\r\nINNER JOIN\ttompit.message_topic t on m.topic = t.id\r\n\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[iot_state]'\r\nGO\r\nCREATE TABLE [tompit].[iot_state]\r\n(\r\n[id] [int] NOT NULL IDENTITY(1, 1),\r\n[hub] [uniqueidentifier] NOT NULL,\r\n[field] [nvarchar] (128) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,\r\n[value] [nvarchar] (1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[modified] [datetime2] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_iot_state] on [tompit].[iot_state]'\r\nGO\r\nALTER TABLE [tompit].[iot_state] ADD CONSTRAINT [PK_iot_state] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_iot_state] on [tompit].[iot_state]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_iot_state] ON [tompit].[iot_state] ([hub]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[iot_state_upd]'\r\nGO\r\nCREATE PROCEDURE [tompit].[iot_state_upd]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tMERGE tompit.iot_state AS d\r\n\tUSING (SELECT * FROM OPENJSON (@items) WITH (hub uniqueidentifier, field nvarchar(128), value nvarchar(1024))) AS s (hub, field, value)\r\n\tON (d.hub = s.hub AND d.field = s.field)\r\n\tWHEN NOT MATCHED BY TARGET THEN\r\n\t\tINSERT (hub, field, modified)\r\n\t\tVALUES (hub, field, GETUTCDATE())\r\n\tWHEN MATCHED THEN\r\n\t\tUPDATE SET\r\n\t\t\tvalue = s.value,\r\n\t\t\tmodified = GETUTCDATE();\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[iot_state_sel]'\r\nGO\r\nCREATE PROCEDURE [tompit].[iot_state_sel]\r\n\t@hub uniqueidentifier\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT *\r\n\tFROM tompit.iot_state\r\n\tWHERE hub = @hub;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[view_message_subscriber]'\r\nGO\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nALTER VIEW [tompit].[view_message_subscriber]\r\nAS\r\nSELECT      s.id, s.connection, s.topic, s.created, s.alive, s.instance, t.name topic_name\r\nFROM        tompit.message_subscriber AS s\r\nINNER JOIN\ttompit.message_topic t on s.topic = t.id\r\n\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[view_message]'\r\nGO\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nALTER VIEW [tompit].[view_message]\r\nAS\r\nSELECT      m.id, m.message, m.topic, m.created, m.expire, m.retry_interval, m.token, t.name topic_name\r\nFROM        tompit.message AS m\r\nINNER JOIN\ttompit.message_topic t on m.topic = t.id\r\n\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.log (created, message, trace_level, source, category, event_id, metric, component, element, date)\r\n\tSELECT created, message, trace_level, source, category, event_id, metric, component, element, date FROM OPENJSON (@items) WITH (created datetime2(7), message nvarchar(max), trace_level int, source nvarchar(1024), category nvarchar(128),\r\n\t\tevent_id int, metric uniqueidentifier, component uniqueidentifier, element uniqueidentifier, date date); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_que]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_que]\r\n\t@date date = NULL,\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL,\r\n\t@metric uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tIF (@metric IS NOT NULL)\r\n\tBEGIN\r\n\t\tWITH\r\n\t\t  cteMetric (session, parent, level)\r\n\t\t  AS\r\n\t\t  (\r\n\t\t\tSELECT session, parent, 1\r\n\t\t\tFROM tompit.metric\r\n\t\t\tWHERE session = @metric\r\n\t\t\tUNION ALL\r\n\t\t\tSELECT p.session, p.parent, m.level + 1\r\n\t\t\tFROM tompit.metric p\r\n\t\t\t  INNER JOIN cteMetric m\r\n\t\t\t\tON p.parent = m.session\r\n\t\t  )\r\n\t\tSELECT * \r\n\t\tFROM tompit.log\r\n\t\tWHERE (metric IN (SELECT session FROM cteMetric))\r\n\tEND\r\n\tELSE\r\n\tBEGIN\r\n\t\tSELECT * \r\n\t\tFROM tompit.log\r\n\t\tWHERE (@date IS NULL OR [date] = @date)\r\n\t\tAND (@component IS NULL OR component = @component)\r\n\t\tAND (@element IS NULL OR element = @element);\r\n\tEND\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_metric_1] on [tompit].[metric]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_metric_1] ON [tompit].[metric] ([parent]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating index [IX_metric] on [tompit].[metric]'\r\nGO\r\nCREATE NONCLUSTERED INDEX [IX_metric] ON [tompit].[metric] ([session]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Adding foreign keys to [tompit].[message_subscriber]'\r\nGO\r\nALTER TABLE [tompit].[message_subscriber] ADD CONSTRAINT [FK_message_subscriber_message_topic] FOREIGN KEY ([topic]) REFERENCES [tompit].[message_topic] ([id]) ON DELETE CASCADE\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Adding foreign keys to [tompit].[message_recipient]'\r\nGO\r\nALTER TABLE [tompit].[message_recipient] ADD CONSTRAINT [FK_message_recipient_message_subscriber] FOREIGN KEY ([subscriber]) REFERENCES [tompit].[message_subscriber] ([id])\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"},{"version":"1.0.215.1","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[service]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[service] ADD\r\n[configuration] [uniqueidentifier] NULL\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Refreshing [tompit].[view_component]'\r\nGO\r\nEXEC sp_refreshview N'[tompit].[view_component]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[view_service]'\r\nGO\r\n\r\n\r\n\r\n\r\nALTER VIEW [tompit].[view_service]\r\nAS\r\nSELECT        s.id, s.name, s.url, s.token, s.status, s.resource_group, s.template, s.meta,\r\n\t\t\t\ts.license, s.package, s.configuration, r.token AS resource_token\r\nFROM            tompit.service AS s INNER JOIN\r\n                         tompit.resource_group AS r ON s.resource_group = r.id\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Refreshing [tompit].[view_service_string]'\r\nGO\r\nEXEC sp_refreshview N'[tompit].[view_service_string]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Refreshing [tompit].[view_folder]'\r\nGO\r\nEXEC sp_refreshview N'[tompit].[view_folder]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer]'\r\nGO\r\nCREATE TABLE [tompit].[installer]\r\n(\r\n[id] [int] NOT NULL IDENTITY(1, 1),\r\n[package] [uniqueidentifier] NOT NULL,\r\n[parent] [uniqueidentifier] NULL,\r\n[status] [int] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_installer] on [tompit].[installer]'\r\nGO\r\nALTER TABLE [tompit].[installer] ADD CONSTRAINT [PK_installer] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Adding constraints to [tompit].[installer]'\r\nGO\r\nALTER TABLE [tompit].[installer] ADD CONSTRAINT [IX_installer] UNIQUE NONCLUSTERED  ([package]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer_ins]'\r\nGO\r\nCREATE PROCEDURE [tompit].[installer_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.installer (package, parent, status)\r\n\tSELECT package, parent, 1 FROM OPENJSON(@items) WITH (package uniqueidentifier, parent uniqueidentifier);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer_del]'\r\nGO\r\nCREATE PROCEDURE [tompit].[installer_del]\r\n\t@package uniqueidentifier\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tUPDATE tompit.installer SET parent = NULL WHERE parent = @package;\r\n\r\n\tUPDATE tompit.installer SET\r\n\t\tparent = NULL\r\n\tDELETE tompit.installer \r\n\tWHERE package = @package;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[service_upd]'\r\nGO\r\nALTER PROCEDURE [tompit].[service_upd]\r\n\t@id int,\r\n\t@name nvarchar(128),\r\n\t@url nvarchar(136),\r\n\t@status int,\r\n\t@template uniqueidentifier,\r\n\t@resource_group int,\r\n\t@package uniqueidentifier = NULL,\r\n\t@configuration uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tupdate [service] set\r\n\t\tname = @name,\r\n\t\turl = @url,\r\n\t\tstatus = @status,\r\n\t\ttemplate = @template,\r\n\t\tresource_group = @resource_group,\r\n\t\tpackage = @package,\r\n\t\tconfiguration = @configuration\r\n\twhere id = @id;\r\n\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer_que]'\r\nGO\r\nCREATE PROCEDURE [tompit].[installer_que]\r\n\t\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.installer;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer_upd]'\r\nGO\r\nCREATE PROCEDURE [tompit].[installer_upd]\r\n\t@id int,\r\n\t@status int \r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tUPDATE tompit.installer SET\r\n\t\tstatus = @status\r\n\tWHERE id = @id;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[installer_sel]'\r\nGO\r\nCREATE PROCEDURE [tompit].[installer_sel]\r\n\t@package uniqueidentifier\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT TOP 1 *\r\n\tFROM tompit.installer \r\n\tWHERE package = @package;\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"}]