[{"version":"1.0.130.2","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log]'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[log] ADD\r\n[metric] [bigint] NULL\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nALTER TABLE [tompit].[log] DROP\r\nCOLUMN [authority_id],\r\nCOLUMN [authority],\r\nCOLUMN [context_authority_id],\r\nCOLUMN [context_authority],\r\nCOLUMN [context_property]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[log].[service]', N'component', N'COLUMN'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nEXEC sp_rename N'[tompit].[log].[context_service]', N'element', N'COLUMN'\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric]'\r\nGO\r\nCREATE TABLE [tompit].[metric]\r\n(\r\n[id] [bigint] NOT NULL IDENTITY(1, 1),\r\n[session] [uniqueidentifier] NOT NULL,\r\n[start] [datetime2] NOT NULL,\r\n[end] [datetime2] NULL,\r\n[result] [int] NULL,\r\n[instance] [int] NOT NULL,\r\n[request_ip] [varchar] (48) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[component] [uniqueidentifier] NOT NULL,\r\n[element] [uniqueidentifier] NULL,\r\n[parent] [uniqueidentifier] NULL,\r\n[request] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[response] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,\r\n[consumption_in] [bigint] NULL,\r\n[consumption_out] [bigint] NULL\r\n) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_metric] on [tompit].[metric]'\r\nGO\r\nALTER TABLE [tompit].[metric] ADD CONSTRAINT [PK_metric] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_clr]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_clr]\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tDELETE \r\n\tFROM tompit.metric\r\n\tWHERE (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_ins]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.metric (session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out)\r\n\tSELECT session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out \r\n\tFROM OPENJSON (@items) WITH (session uniqueidentifier, start datetime2(7), [end] datetime2(7), result int, instance int, request_ip varchar(48),\r\n\t\tcomponent uniqueidentifier, element uniqueidentifier, parent uniqueidentifier, request nvarchar, response nvarchar, consumption_in bigint, consumption_out bigint); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_que]'\r\nGO\r\nCREATE PROCEDURE [tompit].[metric_que]\r\n\t@date date,\r\n\t@component uniqueidentifier,\r\n\t@element uniqueidentifier = NULL \r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.metric\r\n\tWHERE CAST([start] AS DATE) = @date\r\n\tAND (component = @component)\r\n\tAND (@element IS NULL OR element = @element); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.log (created, message, trace_level, source, category, event_id, metric, component, element)\r\n\tSELECT created, message, trace_level, source, category, event_id, metric, component, element FROM OPENJSON (@items) WITH (created datetime2(7), message nvarchar(max), trace_level int, source nvarchar(1024), category nvarchar(128),\r\n\t\tevent_id int, metric bigint, component uniqueidentifier, element uniqueidentifier); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_que]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_que]\r\n\t@date date,\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL,\r\n\t@metric bigint = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.log\r\n\tWHERE CAST(created AS DATE) = @date\r\n\tAND (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element)\r\n\tAND (metric IS NULL OR metric = @metric);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating [tompit].[metric_agg_day]'\r\nGO\r\nCREATE TABLE [tompit].[metric_agg_day]\r\n(\r\n[id] [bigint] NOT NULL IDENTITY(1, 1),\r\n[component] [uniqueidentifier] NOT NULL,\r\n[element] [uniqueidentifier] NULL,\r\n[date] [date] NOT NULL,\r\n[count] [int] NOT NULL,\r\n[success] [int] NOT NULL,\r\n[duration] [bigint] NOT NULL,\r\n[max] [int] NOT NULL,\r\n[min] [int] NOT NULL,\r\n[consumption_in] [bigint] NOT NULL,\r\n[consumption_out] [bigint] NOT NULL,\r\n[max_consumption_in] [bigint] NOT NULL,\r\n[min_consumption_out] [bigint] NOT NULL\r\n) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Creating primary key [PK_metric_agg_day] on [tompit].[metric_agg_day]'\r\nGO\r\nALTER TABLE [tompit].[metric_agg_day] ADD CONSTRAINT [PK_metric_agg_day] PRIMARY KEY CLUSTERED  ([id]) ON [PRIMARY]\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"},{"version":"1.0.131.2","content":"\r\nSET NUMERIC_ROUNDABORT OFF\r\nGO\r\nSET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON\r\nGO\r\nSET XACT_ABORT ON\r\nGO\r\nSET TRANSACTION ISOLATION LEVEL SERIALIZABLE\r\nGO\r\nBEGIN TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[metric_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[metric_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.metric (session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out)\r\n\tSELECT session, start, [end], result, instance, request_ip, component, element, parent, request, response, consumption_in, consumption_out \r\n\tFROM OPENJSON (@items) WITH (session uniqueidentifier, start datetime2(7), [end] datetime2(7), result int, instance int, request_ip varchar(48),\r\n\t\tcomponent uniqueidentifier, element uniqueidentifier, parent uniqueidentifier, request nvarchar(max), response nvarchar(max), consumption_in bigint, consumption_out bigint); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_ins]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_ins]\r\n\t@items nvarchar(MAX)\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tINSERT tompit.log (created, message, trace_level, source, category, event_id, metric, component, element)\r\n\tSELECT created, message, trace_level, source, category, event_id, metric, component, element FROM OPENJSON (@items) WITH (created datetime2(7), message nvarchar(max), trace_level int, source nvarchar(1024), category nvarchar(128),\r\n\t\tevent_id int, metric uniqueidentifier, component uniqueidentifier, element uniqueidentifier); \r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nPRINT N'Altering [tompit].[log_que]'\r\nGO\r\nALTER PROCEDURE [tompit].[log_que]\r\n\t@date date,\r\n\t@component uniqueidentifier = NULL,\r\n\t@element uniqueidentifier = NULL,\r\n\t@metric uniqueidentifier = NULL\r\nAS\r\nBEGIN\r\n\tSET NOCOUNT ON;\r\n\r\n\tSELECT * \r\n\tFROM tompit.log\r\n\tWHERE CAST(created AS DATE) = @date\r\n\tAND (@component IS NULL OR component = @component)\r\n\tAND (@element IS NULL OR element = @element)\r\n\tAND (metric IS NULL OR metric = @metric);\r\nEND\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nCOMMIT TRANSACTION\r\nGO\r\nIF @@ERROR <> 0 SET NOEXEC ON\r\nGO\r\nDECLARE @Success AS BIT\r\nSET @Success = 1\r\nSET NOEXEC OFF\r\nIF (@Success = 1) PRINT 'The database update succeeded'\r\nELSE BEGIN\r\n\tIF @@TRANCOUNT > 0 ROLLBACK TRANSACTION\r\n\tPRINT 'The database update failed'\r\nEND\r\nGO\r\n"}]