@model TomPIT.Models.LoginModel

<div class="text-center">
    <h3 class="mt-5 text-md-left mb-5">
        @SR.ChangePassword
    </h3>
</div>

@if (Model.HasPasswordSet)
{
    <div class="form-group">
        <label for="editExistingPassword">@SR.AttExistingPassword</label>
        <input type="password" id="editExistingPassword" required class="form-control form-control-lg" />
        <div class="invalid-feedback">
            @SR.ValExistingPassword
        </div>
    </div>
}

<div class="form-group">
    <label for="editNewPassword">@SR.AttPassword</label>
    <input type="password" id="editNewPassword" required class="form-control form-control-lg" />
    <div class="invalid-feedback">
        @SR.ValChangePasswordPassword
    </div>
</div>
<div class="form-group">
    <label for="editConfirmPassword">@SR.AttConfirmPassword</label>
    <input type="password" id="editConfirmPassword" required class="form-control form-control-lg" />
    <div class="invalid-feedback">
        @SR.ValChangePasswordConfirm
    </div>
</div>
<div class="form-group">
    @Html.ValidationSummary()
    <div>
        <button type="submit" id="buttonChangePassword" class="btn btn-info btn-lg btn-block">@SR.CmdChangePassword</button>
    </div>
    <div data-tp-tag="progress-container">

    </div>
</div>

<script>
    var user = '@Model.UserName';
    var endpoint = '@Model.Tenant.Url';

    $('#buttonChangePassword', $('#form1')).click(function (e) {
    var form = $('#form1').tpForm('instance');

    e.preventDefault();

	if (form.validate()) {

        form.submit({
            dependencies :[
                $(this)
            ],
            url: '@Url.RouteUrl("login.changepassword")',
            data: {
                'user': user,
                'existing': form.getValue('#editExistingPassword'),
                'endpoint': endpoint,
                'password': form.getValue('#editNewPassword'),
                'confirm': form.getValue('#editConfirmPassword')
            },
            onQueryContinue: function (data, status, request) {
                    return form.hasRedirectUrl(data);
                },
            onBeforeSend: function () {
                form.progress().setText('@SR.ChangingPassword', '');
                },
            onComplete: function (data, status, request) {
                    form.resetValidation();
                },
            onSuccess: function (data, status, request) {
                    if (data.url) {
                        form.progress().setText('<i class="fas fa-check-circle"></i> @SR.ChangePasswordSuccess', 'text-success');
                        location = data.url;
                    }
                    else {
                        form.form().html(data);
                        init();
                        tompit.initContainer($('#form1'));
                    }
                }
            });
	}
});
    @if (Model.HasPasswordSet) {
    @:$('#editExistingPassword').focus();
    }
    else
    {
       @:$('#editNewPassword').focus();
    }
</script>