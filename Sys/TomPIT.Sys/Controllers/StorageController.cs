using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using TomPIT.Storage;
using TomPIT.Sys.Model;

namespace TomPIT.Sys.Controllers
{
	public class StorageController : SysController
	{
		[HttpPost]
		public void Commit()
		{
			var body = FromBody();

			var draft = body.Required<string>("draft");
			var primaryKey = body.Required<string>("primaryKey");

			DataModel.Blobs.Commit(draft, primaryKey);
		}

		[HttpPost]
		public void Delete()
		{
			var body = FromBody();

			var blob = body.Required<Guid>("blob");

			DataModel.Blobs.Delete(blob);
		}

		[HttpGet]
		public List<IBlob> Query(Guid resourceGroup, int type, string primaryKey)
		{
			return DataModel.Blobs.Query(resourceGroup, type, primaryKey);
		}

		[HttpPost]
		public List<IBlob> QueryByType()
		{
			var body = FromBody();
			var microService = body.Optional("microService", Guid.Empty);
			var type = body.Required<int>("type");

			return DataModel.Blobs.Query(microService, type);
		}

		[HttpGet]
		public List<IBlob> QueryByTopic(Guid resourceGroup, int type, string primaryKey, Guid microService, string topic)
		{
			return DataModel.Blobs.Query(resourceGroup, type, primaryKey, microService, topic);
		}

		[HttpGet]
		public List<IBlob> QueryDrafts(string draft)
		{
			return DataModel.Blobs.QueryDrafts(draft);
		}

		[HttpGet]
		public List<IBlob> QueryByMicroService(Guid microService)
		{
			return DataModel.Blobs.Query(microService);
		}

		[HttpGet]
		public IBlob Select(Guid blob)
		{
			return DataModel.Blobs.Select(blob);
		}

		[HttpPost]
		public Guid Upload()
		{
			var body = FromBody();

			var resourceGroup = body.Required<Guid>("resourceGroup");
			var type = body.Required<int>("type");
			var primaryKey = body.Optional("primaryKey", string.Empty);
			var microService = body.Optional("microService", Guid.Empty);
			var topic = body.Optional("topic", string.Empty);
			var fileName = body.Required<string>("fileName");
			var contentType = body.Required<string>("contentType");
			var draft = body.Optional("draft", string.Empty);
			var content = body.Optional("content", string.Empty);
			var policy = body.Optional("policy", StoragePolicy.Singleton);
			var token = body.Optional("token", Guid.Empty);

			ValidateType(type);

			return DataModel.Blobs.Upload(resourceGroup, type, primaryKey, microService, topic, fileName, contentType, draft, Convert.FromBase64String(content), policy, token);
		}

		[HttpPost]
		public void Deploy()
		{
			var body = FromBody();

			var resourceGroup = body.Required<Guid>("resourceGroup");
			var type = body.Required<int>("type");
			var primaryKey = body.Required<string>("primaryKey");
			var microService = body.Optional("microService", Guid.Empty);
			var topic = body.Optional("topic", string.Empty);
			var fileName = body.Required<string>("fileName");
			var contentType = body.Required<string>("contentType");
			var content = body.Optional("content", string.Empty);
			var policy = body.Required<StoragePolicy>("policy");
			var token = body.Required<Guid>("token");
			var version = body.Required<int>("version");

			ValidateType(type);

			DataModel.Blobs.Deploy(resourceGroup, type, primaryKey, microService, topic, fileName, contentType, Convert.FromBase64String(content), policy, token, version);
		}

		[HttpGet]
		public IBlobContent Download(Guid blob)
		{
			return DataModel.BlobsContents.Select(blob);
		}

		[HttpPost]
		public List<IBlobContent> DownloadBatch()
		{
			var body = FromBody();
			var blobs = new List<Guid>();

			foreach (var i in body["items"].Children())
				blobs.Add(Types.Convert<Guid>(i.Value<string>()));

			return DataModel.BlobsContents.Query(blobs);
		}

		[HttpPost]
		public List<IBlobContent> DownloadByTypes()
		{
			var body = FromBody();
			var resourceGroups = new List<Guid>();
			var types = new List<int>();
			var ja = body.Required<JArray>("resourceGroups");
			var ja2 = body.Required<JArray>("types");

			foreach (JValue i in ja)
				resourceGroups.Add(Types.Convert<Guid>(i.Value));

			foreach (JValue i in ja2)
			{
				ValidateType(Types.Convert<int>(i.Value));
				types.Add(Types.Convert<int>(i.Value));
			}

			return DataModel.BlobsContents.Query(resourceGroups, types);
		}

		[HttpPost]
		public void Clean()
		{
			var body = FromBody();

			var microService = body.Required<Guid>("microService");

			DataModel.Blobs.Clean(microService);
		}

		[HttpPost]
		public void Refresh()
		{
			var body = FromBody();
			var token = body.Required<Guid>("token");

			DataModel.Blobs.RefreshBlob(token);
		}

		private static void ValidateType(int type)
		{
			if (type == BlobTypes.Configuration || type == BlobTypes.Template || type == BlobTypes.AutoGenerated)
				throw new NotSupportedException($"Blob type {type} is not supported in the storage. Please use Source files service instead.");
		}

	}
}
